<?php

use Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Vocabulary;

/**
 * @file
 * Primary module hooks for validation by batch process module.
 */


/**
 * Reading CSV file as rows.
 */
 function readCsvFile($file_id) {
  $result = new \stdClass();
  $result->pass = FALSE;
  $result->rows = FALSE;

  $csvFile = File::load($file_id);
  if ($csvFile) {
    $filename = $csvFile->getFileUri();
    $handle = fopen($filename,"rb");
    $rows = [];
    while (($line = fgetcsv($handle)) !== FALSE) {
      // Execlude empty lines.
      if (!preg_match("/^,+$/", implode(',', $line))) {
        $rows[] = $line;
      }
    }
    $result->pass = TRUE;
    $result->status = 'ok';
    $result->rows = $rows;
  }
  else {
    $result->status = 'no_content';
  }
  return $result;
}

/**
 * Parsing CSV file as rows.
 */

/**
 * Parsing CSV file as rows.
 */
 function validateCsvFile($file_id, $validation) {
  $result = new \stdClass();
  $result->pass = FALSE;
  $result->rows = FALSE;
  $result->message = 'not_implemented';
  $errors = [];

  $csvFile = readCsvFile($file_id);
  if (!$csvFile->pass) {
    $csvFile->errors = [$csvFile->message];
    return $csvFile;
  }

  // Validating the first row.
  $expectedFirstRow = $validation['headers'];
  $not_valid = FALSE;
  $row_keys = 0;
  foreach ($expectedFirstRow as $rowName) {
    if (isset($csvFile->rows[0][$row_keys]) && (trim($csvFile->rows[0][$row_keys]) != trim($rowName))) {
      $errors[] = 'Header #' . $row_keys .': ' . $csvFile->rows[0][$row_keys] . ': ' . strlen($csvFile->rows[0][$row_keys]).' != '.$rowName.': '.strlen($rowName);
      $not_valid = TRUE;
      break;
    }
    $row_keys++;
  }

  if ($not_valid) {
    // The file is not valid.
    $result->message = 'not_acceptable';
    $result->errors = $errors;
    return $result;
  }

  $result->pass = TRUE;
  $result->rows = $csvFile->rows;
  $result->message = 'ok';
  return $result;
}
